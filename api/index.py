from flask import Flask, request, jsonify
import requests
import json

app = Flask(__name__)

# API Key for Gemini AI service
GEMINI_API_KEY = 'AIzaSyDiUWowljMDD3JcRw4vk5ZVnpVkqzuHOys'
GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent'

def generate_visa_test_tool(request_data):
    """Generate a Visa card testing tool from API request data"""
    legal_disclaimer = """
    # LEGAL DISCLAIMER:
    # This tool is for educational and security testing purposes only.
    # Always ensure you have proper authorization before testing any payment systems.
    # Unauthorized testing of payment systems is illegal.
    # Generated by API Analysis Tool - Not affiliated with any payment processor.
    """
    
    prompt = f"""
    Create a complete Python Visa card testing tool based on this API request structure.
    The tool should:
    1. Extract static Visa card patterns from the request
    2. Generate valid test Visa numbers (starting with 4, passing Luhn check)
    3. Maintain the original API structure but replace payment data with test values
    4. Include proper error handling
    5. Output clean, production-ready Python code
    6. Include necessary comments and documentation
    
    Return ONLY the Python code with no additional explanations or markdown formatting.
    Begin the code with this legal disclaimer:
    {legal_disclaimer}
    
    API Request Structure:
    {json.dumps(request_data, indent=2)}
    """
    
    headers = {
        'Content-Type': 'application/json',
        'X-goog-api-key': GEMINI_API_KEY,
    }
    
    json_data = {
        'contents': [
            {
                'parts': [
                    {
                        'text': prompt,
                    },
                ],
            },
        ],
    }
    
    response = requests.post(GEMINI_API_URL, headers=headers, json=json_data)
    
    if response.status_code == 200:
        result = response.json()
        try:
            return result['candidates'][0]['content']['parts'][0]['text']
        except KeyError:
            return "# Error: Could not parse AI response"
    else:
        return f"# Error: AI service returned status code {response.status_code}"

@app.route('/api/generate-tool', methods=['POST'])
def generate_tool():
    """Endpoint to generate Visa testing tools"""
    if not request.is_json:
        return jsonify({'error': 'Request must be JSON format'}), 400
    
    request_data = request.get_json()
    
    # Validate required fields
    required_fields = ['headers', 'json_data', 'url']
    for field in required_fields:
        if field not in request_data:
            return jsonify({'error': f'Missing required field: {field}'}), 400
    
    # Generate the testing tool
    tool_code = generate_visa_test_tool(request_data)
    
    return jsonify({
        'status': 'success',
        'generated_tool': tool_code,
        'disclaimer': 'This tool is for authorized testing purposes only'
    })

if __name__ == '__main__':
    app.run(debug=True, port=5000)
